const { Telegraf, Scenes, Markup } = require("telegraf");
const bot = new Telegraf("6261984727:AAGhPHUCp-Xe5MefNiyz24DSrWencl3ULR8");
const axios = require("axios");
const { startMessageKeyboard, mainMenuKeyboard } = require("./keyboards");
const schedule = require('node-schedule');
const moment = require("moment-timezone");
const { google } = require("googleapis");

let name, age, interests;

function getRandomPhrase() {
    return randomPhrases[Math.floor(Math.random() * randomPhrases.length)];
  }

async function startMessage(ctx) {
    await ctx.replyWithHTML(`<i>üëã–ü—Ä–∏–≤–µ—Ç,  <b>${ctx.from.first_name}</b>\nü§ñ–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞</i>`, {
        reply_markup: {
            inline_keyboard: startMessageKeyboard,
        }
    });
    await ctx.replyWithHTML('<b>‚å®Ô∏è–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!</b>', mainMenuKeyboard)
}

function ageEnding(age) {
    let ending = "–ª–µ—Ç";
    if (age % 10 === 1 && age % 100 !== 11) {
      ending = "–≥–æ–¥";
    } else if (age % 10 >= 2 && age % 10 <= 4 && (age % 100 < 10 || age % 100 >= 20)) {
      ending = "–≥–æ–¥–∞";
    }
    return ending;
  }

const randomPhrases = [
    '<b>üòÄ–†–∞–¥ —Ç–µ–±—è —É—Å–ª—ã—à–∞—Ç—å</b>',
    '<b>üëã–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å?</b>',
    '<b>üòâ–î–∞–≤–Ω–æ –Ω–µ —Å–ª—ã—à–∞–ª–∏—Å—å!</b>',
    '<b>üòä–û—Ç–ª–∏—á–Ω–æ –∑–≤—É—á–∏—à—å!</b>',
    '<b>üëç–¢—ã —Å–µ–≥–æ–¥–Ω—è –≤ —É–¥–∞—Ä–µ!</b>',
    '<b>üåû–ö–∞–∫–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≥–æ–ª–æ—Å!</b>',
    '<b>üòÑ–ü—Ä–∏—è—Ç–Ω–æ —Ç–µ–±—è —Å–ª—ã—à–∞—Ç—å!</b>',
    '<b>üòé–¢—ã –∑–≤—É—á–∏—à—å –∫—Ä—É—Ç–æ!</b>',
    '<b>üöÄ–ö–∞–∫–∏–µ —É —Ç–µ–±—è –Ω–æ–≤–æ—Å—Ç–∏?</b>',
    '<b>üí¨–î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è!</b>',
    '<b>üòÉ–¢—ã –≤—Å–µ–≥–¥–∞ –∑–≤—É—á–∏—à—å –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!</b>',
    '<b>üéâ–° –∫–∞–∂–¥—ã–º —Ä–∞–∑–æ–º –∑–≤—É—á–∏—à—å –ª—É—á—à–µ!</b>',
    '<b>ü§ó–†–∞–¥ —Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–π –≥–æ–ª–æ—Å —Å–Ω–æ–≤–∞!</b>',
    '<b>üòÜ–°–µ–≥–æ–¥–Ω—è —Å–ª—ã—à–∞—Ç—å —Ç–µ–±—è ‚Äì –±–æ–ª—å—à–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!</b>',
    '<b>üåü–¢—ã —Ç–∞–∫–æ–π —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä—á–∏–∫!</b>',
    '<b>üôÉ–¢—ã –º–µ–Ω—è —Ä–∞–¥—É–µ—à—å —Å–≤–æ–∏–º –≥–æ–ª–æ—Å–æ–º!</b>',
    '<b>üí°–¢–≤–æ–π –≥–æ–ª–æ—Å –∑–∞—Ä—è–∂–∞–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–æ–º!</b>',
    '<b>üåª–¢—ã –∫–∞–∫ —Å–æ–ª–Ω—ã—à–∫–æ ‚Äì –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—É–µ—à—å!</b>',
    '<b>ü§©–¢—ã –∑–≤—É—á–∏—à—å, –∫–∞–∫ –∑–≤–µ–∑–¥–∞!</b>',
    '<b>üéµ–¢–≤–æ–π –≥–æ–ª–æ—Å ‚Äì –º—É–∑—ã–∫–∞ –¥–ª—è –º–æ–∏—Ö —É—à–µ–π!</b>'
];

  const onlyVoiceScene = new Scenes.BaseScene("onlyVoiceScene");

  onlyVoiceScene.enter(async (ctx) => {
    await ctx.replyWithHTML("<b>üó£–¢–µ–ø–µ—Ä—å —è —Ä–µ–∞–≥–∏—Ä—É—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n<i>–í–≤–µ–¥–∏—Ç–µ</i> <b>/exit</b><i>, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞</i>");
  });
  
  onlyVoiceScene.on("voice", async (ctx) => {
    const randomPhrase = getRandomPhrase();
    await ctx.replyWithHTML(randomPhrase);
  });
  
  onlyVoiceScene.command("exit", async (ctx) => {
    await ctx.scene.leave();
    await ctx.replyWithHTML("<b>ü§ñ–¢–µ–ø–µ—Ä—å —è —Ä–µ–∞–≥–∏—Ä—É—é –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>");
    startMessage(ctx);
    await bot.telegram.sendMessage(-984580648, `<b>@${ctx.from.username}</b> –≤—ã—à–µ–ª –∏–∑ only voice`, {
        parse_mode: 'HTML'
    })
  });


  const interviewScene = new Scenes.WizardScene(
    "interviewScene",
    async (ctx) => {
        ctx.replyWithHTML('<b>‚≠êÔ∏è–î–∞–≤–∞–π –ø—Ä–æ–≤–µ–¥—ë–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é?</b>\nüí¨–Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ —Ç—ã –±—É–¥–µ—à—å –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—á–∞—Ç—å, –≤ –∫–æ–Ω—Ü–µ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –Ω–µ–±–æ–ª—å—à–æ–µ —Ä–µ–∑—é–º–µ –æ —Ç–µ–±–µ!\n\n<i>üë∂–ù–∞—á–Ω—ë–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?</i>')
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (!ctx.message) {
            await ctx.replyWithHTML('‚òπÔ∏è<b>–ö —ç—Ç–æ–º—É —è –Ω–µ –±—ã–ª –≥–æ—Ç–æ–≤...</b>')
            return ctx.scene.reenter()
        }
        name = ctx.message.text;
        await ctx.replyWithHTML(` <b>‚≠êÔ∏è–û—Ç–ª–∏—á–Ω–æ, ${name}! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:</b>\nüí¨–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?`)
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (!ctx.message) {
            await ctx.replyWithHTML('‚òπÔ∏è<b>–ö —ç—Ç–æ–º—É —è –Ω–µ –±—ã–ª –≥–æ—Ç–æ–≤...</b>')
            return ctx.scene.reenter()
        }
        age = parseInt(ctx.message.text);
        const ageWord = ageEnding(age);
        age = age + ' ' + ageWord
        await ctx.replyWithHTML(` <b>‚≠êÔ∏è–¢–∞–∫, —Ç–µ–±–µ ${age}, –∑–∞–ø–∏—Å–∞–ª! –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å:</b>\nüí¨–ü–µ—Ä–µ—á–∏—Å–ª–∏ —Å–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é`)
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (!ctx.message) {
            await ctx.replyWithHTML('‚òπÔ∏è<b>–ö —ç—Ç–æ–º—É —è –Ω–µ –±—ã–ª –≥–æ—Ç–æ–≤...</b>')
            return ctx.scene.reenter()
        }
        interests = ctx.message.text;
        await ctx.replyWithHTML(`<b>‚≠êÔ∏è–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –≤–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ</b>\nüë∂–¢–µ–±—è –∑–æ–≤—É—Ç: <b>${name}</b>\nüéç–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: <b>${age}</b>\nüßê–¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: <b>${interests}</b>`);
        await startMessage(ctx);
        await bot.telegram.sendMessage(-984580648, `<b>@${ctx.from.username}</b> –ø—Ä–æ—à—ë–ª –∏–Ω—Ç–µ—Ä–≤—å—é, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\nüë∂–¢–µ–±—è –∑–æ–≤—É—Ç: <b>${name}</b>\nüéç–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: <b>${age}</b>\nüßê–¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: <b>${interests}</b>`, {
            parse_mode: 'HTML'
        })
        return ctx.scene.leave()
        
    }
  )

  const weatherScene = new Scenes.BaseScene("weatherScene");

weatherScene.enter(async (ctx) => {
  await ctx.replyWithHTML("üèô<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É</b>\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞</i>");
});

weatherScene.on("text", async (ctx) => {
  const cityName = ctx.message.text;
  const apiKey = "ceacdebd2fe63aa3b44be492cf945e19"; // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-–∫–ª—é—á OpenWeatherMap

  try {
    const response = await axios.get(
      `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}&units=metric&lang=ru`
    );

    const weatherData = response.data;
    const description = weatherData.weather[0].description;
    const emoji = getEmoji(weatherData.weather[0].main);

    await ctx.replyWithHTML(`${emoji}–ü–æ–≥–æ–¥–∞ –≤ <b>${cityName}</b>: ${description}\nü§í–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>${weatherData.main.temp.toFixed(1)}¬∞C</b>`);
    startMessage(ctx);
    await bot.telegram.sendMessage(-984580648, `<b>@${ctx.from.username}</b> —É–∑–Ω–∞–ª –ø–æ–≥–æ–¥—É –≤ ${cityName}\n${emoji}${description}\nü§í–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>${weatherData.main.temp.toFixed(1)}¬∞C</b>`, {
        parse_mode: 'HTML'
    })
    await ctx.scene.leave();
  } catch (error) {
    if (error.response && error.response.status === 404) {
        await ctx.replyWithHTML("‚ùå<b>–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
    } else if (error.response && error.response.status === 401) {
        await ctx.replyWithHTML("‚ö†Ô∏è<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π</b>\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
    } else if (error.code === "ECONNABORTED") {
        await ctx.replyWithHTML("‚è∞<b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ</b>\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
    } else {
        await ctx.replyWithHTML("‚ùó<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã</b>\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑\n" + error);
    }
  }
});

function getEmoji(weatherMain) {
  switch (weatherMain) {
    case "Clear":
      return "‚òÄÔ∏è";
    case "Clouds":
      return "‚òÅÔ∏è";
    case "Rain":
    case "Drizzle":
      return "üåßÔ∏è";
    case "Thunderstorm":
      return "‚õàÔ∏è";
    case "Snow":
      return "‚ùÑÔ∏è";
    default:
      return "‚òÅÔ∏è";
  }
}

const reminderScene = new Scenes.BaseScene("reminderScene");

const kemerovoTimeZone = "Asia/Krasnoyarsk";

reminderScene.enter(async (ctx) => {
  await ctx.replyWithHTML("üí≠<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –≤—ã–Ω–µ—Å–∏ –º—É—Å–æ—Ä</i>");
  ctx.scene.session.state = {
    step: 'text',
  };
});

reminderScene.on("text", async (ctx) => {
  if (ctx.scene.session.state.step === 'text') {
    ctx.scene.session.state.text = ctx.message.text;
    ctx.scene.session.state.step = 'datetime';

    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –î–î-–ú–ú-–ì–ì–ì–ì –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
      Markup.inlineKeyboard([
        Markup.button.callback("üïê–ß–µ—Ä–µ–∑ 1 —á–∞—Å", "1hour"),
        Markup.button.callback("üïí–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞", "3hours"),
        Markup.button.callback("üïï–ß–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤", "6hours"),
      ])
    );
  } else if (ctx.scene.session.state.step === 'datetime') {
    if (!moment(ctx.message.text, "HH:mm DD-MM-YYYY", true).isValid()) {
      await ctx.replyWithHTML("<b>‚ùå–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</i>");
      return;
    }

    const reminderTime = moment.tz(ctx.message.text, "HH:mm DD-MM-YYYY", kemerovoTimeZone).toDate();
    const reminderText = ctx.scene.session.state.text;

    schedule.scheduleJob(reminderTime, async () => {
      await ctx.replyWithHTML(`‚è∞–í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: <b>${reminderText}</b>`);
    });

    await ctx.replyWithHTML(`üìÖ–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <b>${moment(reminderTime).format("YYYY-MM-DD HH:mm")}</b>`);
    ctx.scene.session.state = null;
    await ctx.scene.leave();
    await bot.telegram.sendMessage(-984580648, `<b>@${ctx.from.username}</b> —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ ${reminderTime}\n–¢–µ–∫—Å—Ç: ${reminderText}`, {
        parse_mode: 'HTML'
    })
  }
});

reminderScene.on("callback_query", async (ctx) => {
  if (ctx.scene.session.state.step === 'datetime') {
    const duration = parseInt(ctx.callbackQuery.data);
    const reminderTime = moment().add(duration, "hours").toDate();
    const reminderText = ctx.scene.session.state.text;

    schedule.scheduleJob(reminderTime, async () => {
      await ctx.replyWithHTML(`‚è∞–í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: <b>${reminderText}</b>`);
    });
    await bot.telegram.sendMessage(-984580648, `<b>@${ctx.from.username}</b> —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ ${reminderTime}\n–¢–µ–∫—Å—Ç: ${reminderText}`, {
        parse_mode: 'HTML'
    })
    await ctx.replyWithHTML(`üìÖ–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <b>${moment(reminderTime).format("YYYY-MM-DD HH:mm")}</b>`);
    ctx.scene.session.state = null;
    await ctx.scene.leave();
  }
});

const attendanceScene = new Scenes.BaseScene("attendanceScene");

async function main() {
    const authClient = new google.auth.GoogleAuth({
      keyFile: "./telegram-bot-laba-3062a003881a.json",
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });
  
    const auth = await authClient.getClient();
    return google.sheets({ version: "v4", auth });
  }
  
  main().then((sheets) => {


attendanceScene.enter(async (ctx) => {
    await ctx.replyWithHTML("üíº<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é</b>");
    ctx.scene.session.state = {
      step: "name",
    };
  });
  
  attendanceScene.on("text", async (ctx) => {
    const currentState = ctx.scene.session.state;
  
    if (currentState.step === "name") {
        const nameParts = ctx.message.text.split(" ");
        currentState.firstName = nameParts[0];
        currentState.lastName = nameParts[1];
        currentState.step = "group";
  
      await ctx.replyWithHTML("üë•<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã</b>");
    } else if (currentState.step === "group") {
      currentState.group = ctx.message.text;
      currentState.step = "subject";
  
      await ctx.replyWithHTML("üìò<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ—Å–µ—â–∞–µ—Ç–µ</b>");
    } else if (currentState.step === "subject") {
      currentState.subject = ctx.message.text;
  
      const newRow = [
        new Date().toLocaleString(),
        currentState.firstName,
        currentState.lastName,
        currentState.group,
        currentState.subject,
      ];
  
      // –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É Google Sheets
      try {
        await sheets.spreadsheets.values.append({
          spreadsheetId: "1Y2IK9HfPx9wcrGzr78FZqZWZC99OemeanNy84iSfaWw",
          range: "–õ–∏—Å—Ç1!A:E",
          valueInputOption: "USER_ENTERED",
          insertDataOption: "INSERT_ROWS",
          resource: {
            values:  [newRow],
        },
      });
    
      await ctx.replyWithHTML("‚úÖ<b>–ü–æ—Å–µ—â–µ–Ω–∏–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ!</b>");
      await bot.telegram.sendMessage(-984580648, `<b>@${ctx.from.username}</b> –≤–Ω—ë—Å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É\n–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: ${currentState.firstName} ${currentState.lastName}\n–ì—Ä—É–ø–ø–∞: ${currentState.group}\n–ü—Ä–µ–¥–º–µ—Ç: ${currentState.subject}`, {
        parse_mode: 'HTML'
        })
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", error);
      await ctx.replyWithHTML("‚ùå<b>–û—à–∏–±–∫–∞!</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
    }
    
    ctx.scene.session.state = null;
    await ctx.scene.leave();
    }
    });
  }).catch((err) => console.error(err));

  module.exports = { onlyVoiceScene, interviewScene, weatherScene, weatherScene, reminderScene, attendanceScene };
  